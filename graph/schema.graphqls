interface Node {
  id: ID!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type User implements Node {
  id: ID!
  username: String
  programs(after: Cursor, first: Int, before: Cursor, last: Int): ProgramConnection
}

type UserEdge {
  node: User
  cursor: Cursor
}

type UserConnection {
  pageInfo: PageInfo
  edges: [UserEdge]
}

type Program implements Node {
  id: ID!
  name: String!
}

type ProgramEdge {
  node: Program
  cursor: Cursor
}

type ProgramConnection {
  pageInfo: PageInfo
  edges: [ProgramEdge]
}

input createUserInput {
  username: String!
}


input createProgramInput {
  name: String!
  creator: ID!
}

type Query {
  node(id: ID!): Node
  users(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection
}

type Mutation {
  createUser(input: createUserInput!): User!
  createProgram(input: createProgramInput!): Program!
}
