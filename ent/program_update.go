// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/francismarcus/entgql/ent/predicate"
	"github.com/francismarcus/entgql/ent/program"
	"github.com/francismarcus/entgql/ent/user"
)

// ProgramUpdate is the builder for updating Program entities.
type ProgramUpdate struct {
	config
	hooks      []Hook
	mutation   *ProgramMutation
	predicates []predicate.Program
}

// Where adds a new predicate for the builder.
func (pu *ProgramUpdate) Where(ps ...predicate.Program) *ProgramUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetName sets the name field.
func (pu *ProgramUpdate) SetName(s string) *ProgramUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetCreatorID sets the creator edge to User by id.
func (pu *ProgramUpdate) SetCreatorID(id int) *ProgramUpdate {
	pu.mutation.SetCreatorID(id)
	return pu
}

// SetNillableCreatorID sets the creator edge to User by id if the given value is not nil.
func (pu *ProgramUpdate) SetNillableCreatorID(id *int) *ProgramUpdate {
	if id != nil {
		pu = pu.SetCreatorID(*id)
	}
	return pu
}

// SetCreator sets the creator edge to User.
func (pu *ProgramUpdate) SetCreator(u *User) *ProgramUpdate {
	return pu.SetCreatorID(u.ID)
}

// Mutation returns the ProgramMutation object of the builder.
func (pu *ProgramUpdate) Mutation() *ProgramMutation {
	return pu.mutation
}

// ClearCreator clears the creator edge to User.
func (pu *ProgramUpdate) ClearCreator() *ProgramUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProgramUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProgramMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProgramUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProgramUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProgramUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   program.Table,
			Columns: program.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: program.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: program.FieldName,
		})
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatorTable,
			Columns: []string{program.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatorTable,
			Columns: []string{program.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProgramUpdateOne is the builder for updating a single Program entity.
type ProgramUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProgramMutation
}

// SetName sets the name field.
func (puo *ProgramUpdateOne) SetName(s string) *ProgramUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetCreatorID sets the creator edge to User by id.
func (puo *ProgramUpdateOne) SetCreatorID(id int) *ProgramUpdateOne {
	puo.mutation.SetCreatorID(id)
	return puo
}

// SetNillableCreatorID sets the creator edge to User by id if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableCreatorID(id *int) *ProgramUpdateOne {
	if id != nil {
		puo = puo.SetCreatorID(*id)
	}
	return puo
}

// SetCreator sets the creator edge to User.
func (puo *ProgramUpdateOne) SetCreator(u *User) *ProgramUpdateOne {
	return puo.SetCreatorID(u.ID)
}

// Mutation returns the ProgramMutation object of the builder.
func (puo *ProgramUpdateOne) Mutation() *ProgramMutation {
	return puo.mutation
}

// ClearCreator clears the creator edge to User.
func (puo *ProgramUpdateOne) ClearCreator() *ProgramUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ProgramUpdateOne) Save(ctx context.Context) (*Program, error) {

	var (
		err  error
		node *Program
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProgramMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProgramUpdateOne) SaveX(ctx context.Context) *Program {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProgramUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProgramUpdateOne) sqlSave(ctx context.Context) (pr *Program, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   program.Table,
			Columns: program.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: program.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Program.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: program.FieldName,
		})
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatorTable,
			Columns: []string{program.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatorTable,
			Columns: []string{program.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Program{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
