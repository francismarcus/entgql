interface Node {
  id: ID!
}

scalar Cursor
scalar Time

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type Tweet implements Node {
  id: ID!
  user: User
}

type TweetEdge {
  node: Tweet
  cursor: Cursor
}

type TweetConnection {
  pageInfo: PageInfo
  edges: [TweetEdge]
}

type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  email: String!
  username: String!
  programs(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): ProgramConnection
  followers(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): UserConnection
  follows(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection
  tweets(after: Cursor, first: Int, before: Cursor, last: Int): TweetConnection
  followersCount: Int!
  followsCount: Int!
  tweetsCount: Int!
}

type UserEdge {
  node: User
  cursor: Cursor
}

type UserConnection {
  pageInfo: PageInfo
  edges: [UserEdge]
}

type Program implements Node {
  id: ID!
  name: String!
}

type ProgramEdge {
  node: Program
  cursor: Cursor
}

type ProgramConnection {
  pageInfo: PageInfo
  edges: [ProgramEdge]
}

input createUserInput {
  username: String!
  email: String!
  password: String!
}

input createProgramInput {
  name: String!
  creator: ID!
}

input followUserInput {
  followID: ID!
  userID: ID!
}

input unFollowUserInput {
  followID: ID!
  userID: ID!
}

input loginUserInput {
  username: String!
  password: String!
}

input signupUserInput {
  email: String!
  username: String!
  password: String!
}

type AuthPayload {
  user: User
  token: String
}

input usernameAvailableInput {
  username: String!
}

input byIDInput {
  id: ID!
}

type Query {
  node(id: ID!): Node
  ping: String!
  usernameAvailable(input: usernameAvailableInput!): Boolean
  users(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection
  user(input: byIDInput!): User
}

type Mutation {
  createUser(input: createUserInput!): User!
  createProgram(input: createProgramInput!): Program!
  followUser(input: followUserInput!): User
  unFollowUser(input: unFollowUserInput!): User
  loginUser(input: loginUserInput!): AuthPayload
  signupUser(input: signupUserInput!): AuthPayload
}
